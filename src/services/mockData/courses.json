[
  {
    "Id": 1,
    "title": "Complete React Fundamentals",
    "description": "Master the fundamentals of React including components, props, state, and hooks. Perfect for beginners looking to build modern web applications.",
    "totalLessons": 8,
    "duration": "4-5 hours",
    "lessons": [
      {
        "Id": 101,
        "courseId": 1,
        "title": "Introduction to React",
        "content": "Welcome to React! In this lesson, we'll explore what React is and why it's become the most popular JavaScript library for building user interfaces.\n\n**What is React?**\nReact is a JavaScript library developed by Facebook for building user interfaces, particularly web applications. It allows developers to create large web applications that can change data, without reloading the page.\n\n**Key Benefits:**\n• **Component-Based**: Build encapsulated components that manage their own state\n• **Declarative**: Design simple views for each state in your application\n• **Learn Once, Write Anywhere**: Use React for web, mobile (React Native), and even desktop applications\n\n**Virtual DOM**\nOne of React's key innovations is the Virtual DOM - a programming concept where a 'virtual' representation of the UI is kept in memory and synced with the 'real' DOM. This makes React applications fast and responsive.\n\nBy the end of this course, you'll be comfortable building React applications from scratch!",
        "videoUrl": "",
        "completed": true,
        "resources": [
          {
            "title": "Official React Documentation",
            "url": "https://reactjs.org/docs/getting-started.html"
          }
        ]
      },
      {
        "Id": 102,
        "courseId": 1,
        "title": "Setting Up Your Development Environment",
        "content": "Before we start coding, let's set up a proper development environment for React development.\n\n**Prerequisites:**\n• Node.js (version 14 or higher)\n• A code editor (VS Code recommended)\n• Basic knowledge of HTML, CSS, and JavaScript\n\n**Create React App**\nThe easiest way to start a new React project is using Create React App:\n\n```bash\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\n**Project Structure**\nLet's explore the files and folders created:\n• **public/**: Contains static files like index.html\n• **src/**: Contains your React components and application code\n• **package.json**: Lists dependencies and scripts\n\n**Development Tools**\nInstall the React Developer Tools browser extension for debugging React applications. It provides insights into component hierarchy, props, and state.",
        "videoUrl": "",
        "completed": true,
        "resources": []
      },
      {
        "Id": 103,
        "courseId": 1,
        "title": "Your First Component",
        "content": "Components are the building blocks of React applications. In this lesson, we'll create our first React component.\n\n**What are Components?**\nComponents are independent, reusable pieces of UI. They accept inputs (called 'props') and return React elements describing what should appear on the screen.\n\n**Function Components**\nThe simplest way to define a component is with a JavaScript function:\n\n```jsx\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}!</h1>;\n}\n```\n\n**JSX Syntax**\nJSX is a syntax extension for JavaScript that looks similar to HTML. It's not required but makes React code much more readable:\n\n```jsx\nconst element = <h1>Hello, world!</h1>;\n```\n\n**Rendering Components**\nTo render a component, you use it like an HTML element:\n\n```jsx\n<Welcome name=\"Alice\" />\n```\n\nComponents must start with a capital letter to distinguish them from regular HTML elements.",
        "videoUrl": "",
        "completed": false,
        "resources": []
      },
      {
        "Id": 104,
        "courseId": 1,
        "title": "Understanding Props",
        "content": "Props (properties) are how you pass data from parent components to child components in React.\n\n**What are Props?**\nProps are read-only inputs to components. They allow you to pass data down the component tree.\n\n**Passing Props**\n```jsx\nfunction App() {\n  return (\n    <div>\n      <Welcome name=\"Alice\" age={25} />\n      <Welcome name=\"Bob\" age={30} />\n    </div>\n  );\n}\n```\n\n**Receiving Props**\n```jsx\nfunction Welcome(props) {\n  return (\n    <div>\n      <h1>Hello, {props.name}!</h1>\n      <p>You are {props.age} years old.</p>\n    </div>\n  );\n}\n```\n\n**Destructuring Props**\nYou can destructure props for cleaner code:\n\n```jsx\nfunction Welcome({ name, age }) {\n  return (\n    <div>\n      <h1>Hello, {name}!</h1>\n      <p>You are {age} years old.</p>\n    </div>\n  );\n}\n```\n\n**Props are Immutable**\nRemember: props should never be modified by the component that receives them.",
        "videoUrl": "",
        "completed": false,
        "resources": []
      },
      {
        "Id": 105,
        "courseId": 1,
        "title": "State and useState Hook",
        "content": "State allows components to manage and update their own data. We'll learn how to use the useState hook.\n\n**What is State?**\nState is data that can change over time. Unlike props, state is managed within the component and can be updated.\n\n**The useState Hook**\n```jsx\nimport { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n**How useState Works**\n• `useState(0)` initializes state with a value of 0\n• Returns an array with two elements: current state and setter function\n• `count` is the current state value\n• `setCount` is the function to update state\n\n**State Updates are Asynchronous**\nWhen you call setState, React may batch multiple updates for performance:\n\n```jsx\n// Better approach for updating based on previous state\nsetCount(prevCount => prevCount + 1);\n```\n\n**Multiple State Variables**\nYou can use multiple useState hooks in a single component:\n\n```jsx\nconst [name, setName] = useState('');\nconst [age, setAge] = useState(0);\n```",
        "videoUrl": "",
        "completed": false,
        "resources": []
      },
      {
        "Id": 106,
        "courseId": 1,
        "title": "Handling Events",
        "content": "Learn how to handle user interactions like clicks, form submissions, and keyboard events in React.\n\n**Event Handling in React**\nReact events are SyntheticEvents - a cross-browser wrapper around the browser's native event.\n\n**onClick Events**\n```jsx\nfunction Button() {\n  const handleClick = (e) => {\n    e.preventDefault();\n    alert('Button clicked!');\n  };\n\n  return <button onClick={handleClick}>Click me</button>;\n}\n```\n\n**Passing Arguments**\n```jsx\nfunction TodoList({ todos, onDelete }) {\n  return (\n    <ul>\n      {todos.map(todo => (\n        <li key={todo.id}>\n          {todo.text}\n          <button onClick={() => onDelete(todo.id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n**Form Events**\n```jsx\nfunction LoginForm() {\n  const [email, setEmail] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log('Submitted:', email);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n```\n\n**Common Event Types**\n• onClick, onDoubleClick\n• onChange, onInput\n• onSubmit\n• onFocus, onBlur\n• onMouseOver, onMouseOut\n• onKeyDown, onKeyUp",
        "videoUrl": "",
        "completed": false,
        "resources": []
      },
      {
        "Id": 107,
        "courseId": 1,
        "title": "Conditional Rendering and Lists",
        "content": "Learn how to conditionally render elements and work with lists of data in React.\n\n**Conditional Rendering**\nYou can use JavaScript operators to conditionally render elements:\n\n**Using if/else**\n```jsx\nfunction Greeting({ isLoggedIn }) {\n  if (isLoggedIn) {\n    return <h1>Welcome back!</h1>;\n  }\n  return <h1>Please sign in.</h1>;\n}\n```\n\n**Using Ternary Operator**\n```jsx\nfunction Greeting({ isLoggedIn }) {\n  return (\n    <div>\n      {isLoggedIn ? <h1>Welcome back!</h1> : <h1>Please sign in.</h1>}\n    </div>\n  );\n}\n```\n\n**Using && Operator**\n```jsx\nfunction Mailbox({ unreadMessages }) {\n  return (\n    <div>\n      <h1>Hello!</h1>\n      {unreadMessages.length > 0 && (\n        <h2>You have {unreadMessages.length} unread messages.</h2>\n      )}\n    </div>\n  );\n}\n```\n\n**Rendering Lists**\nUse the map() method to render lists:\n\n```jsx\nfunction NumberList({ numbers }) {\n  const listItems = numbers.map((number) => (\n    <li key={number.toString()}>{number}</li>\n  ));\n  \n  return <ul>{listItems}</ul>;\n}\n```\n\n**Keys in Lists**\nKeys help React identify which items have changed. Use unique, stable identifiers:\n\n```jsx\nfunction TodoList({ todos }) {\n  return (\n    <ul>\n      {todos.map(todo => (\n        <li key={todo.id}>{todo.text}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n**Filtering Lists**\n```jsx\nfunction FilteredList({ items, filter }) {\n  const filteredItems = items.filter(item => \n    item.name.toLowerCase().includes(filter.toLowerCase())\n  );\n  \n  return (\n    <ul>\n      {filteredItems.map(item => (\n        <li key={item.id}>{item.name}</li>\n      ))}\n    </ul>\n  );\n}\n```",
        "videoUrl": "",
        "completed": false,
        "resources": []
      },
      {
        "Id": 108,
        "courseId": 1,
        "title": "Building a Complete Todo App",
        "content": "Let's put everything together by building a complete Todo application that demonstrates all the concepts we've learned.\n\n**App Features**\n• Add new todos\n• Mark todos as complete\n• Delete todos\n• Filter todos (all, active, completed)\n• Show total count\n\n**Component Structure**\n```\nApp\n├── TodoInput\n├── TodoList\n│   └── TodoItem\n└── TodoFilter\n```\n\n**State Management**\nWe'll use useState to manage:\n• List of todos\n• Current filter\n• Input value\n\n**Todo Data Structure**\n```javascript\n{\n  id: 1,\n  text: 'Learn React',\n  completed: false,\n  createdAt: new Date()\n}\n```\n\n**Key Implementation Points**\n• Use unique IDs for each todo (Date.now() or uuid)\n• Implement proper event handling for add, toggle, and delete\n• Use controlled inputs for form handling\n• Apply conditional rendering for different filter states\n• Use proper key props when rendering lists\n\n**Styling Tips**\n• Add CSS classes for completed todos\n• Use hover effects for better UX\n• Make the interface responsive\n• Add smooth transitions\n\nBy building this app, you'll practice all the fundamental React concepts and have a solid foundation for building more complex applications!",
        "videoUrl": "",
        "completed": false,
        "resources": [
          {
            "title": "TodoMVC - Todo Examples",
            "url": "http://todomvc.com/"
          },
          {
            "title": "React Patterns",
            "url": "https://reactpatterns.com/"
          }
        ]
      }
    ]
  },
  {
    "Id": 2,
    "title": "Advanced JavaScript Concepts",
    "description": "Dive deep into advanced JavaScript concepts including closures, prototypes, async/await, and modern ES6+ features.",
    "totalLessons": 6,
    "duration": "3-4 hours",
    "lessons": [
      {
        "Id": 201,
        "courseId": 2,
        "title": "Closures and Scope",
        "content": "Understanding closures is crucial for mastering JavaScript. Let's explore how they work and why they're useful.\n\n**What is a Closure?**\nA closure is a function that has access to variables in its outer (enclosing) scope even after the outer function has returned.\n\n**Basic Example**\n```javascript\nfunction outerFunction(x) {\n  // This is the outer function's scope\n  \n  function innerFunction(y) {\n    // This inner function has access to x\n    return x + y;\n  }\n  \n  return innerFunction;\n}\n\nconst add5 = outerFunction(5);\nconsole.log(add5(3)); // 8\n```\n\n**Practical Use Cases**\n\n**1. Data Privacy**\n```javascript\nfunction createCounter() {\n  let count = 0;\n  \n  return {\n    increment: () => ++count,\n    decrement: () => --count,\n    getCount: () => count\n  };\n}\n\nconst counter = createCounter();\ncounter.increment(); // 1\ncounter.increment(); // 2\nconsole.log(counter.getCount()); // 2\n// count is not accessible from outside!\n```\n\n**2. Function Factories**\n```javascript\nfunction createMultiplier(multiplier) {\n  return function(x) {\n    return x * multiplier;\n  };\n}\n\nconst double = createMultiplier(2);\nconst triple = createMultiplier(3);\n\nconsole.log(double(5)); // 10\nconsole.log(triple(5)); // 15\n```\n\n**3. Module Pattern**\n```javascript\nconst calculator = (function() {\n  let result = 0;\n  \n  return {\n    add: (x) => result += x,\n    subtract: (x) => result -= x,\n    multiply: (x) => result *= x,\n    getResult: () => result,\n    reset: () => result = 0\n  };\n})();\n```\n\nClosures are everywhere in JavaScript - event handlers, callbacks, and many library patterns use closures under the hood.",
        "videoUrl": "",
        "completed": false,
        "resources": []
      },
      {
        "Id": 202,
        "courseId": 2,
        "title": "Prototypes and Inheritance",
        "content": "JavaScript uses prototype-based inheritance. Understanding prototypes is key to mastering object-oriented JavaScript.\n\n**What are Prototypes?**\nEvery JavaScript object has a prototype. The prototype is also an object that contains properties and methods that are inherited by other objects.\n\n**The Prototype Chain**\n```javascript\nfunction Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.greet = function() {\n  return `Hello, I'm ${this.name}`;\n};\n\nconst john = new Person('John');\nconsole.log(john.greet()); // \"Hello, I'm John\"\n```\n\n**How Prototype Lookup Works**\n1. JavaScript first looks for the property/method on the object itself\n2. If not found, it looks at the object's prototype\n3. If not found, it continues up the prototype chain\n4. If it reaches the end (null), it returns undefined\n\n**Object.create()**\n```javascript\nconst animal = {\n  makeSound: function() {\n    return 'Some sound';\n  }\n};\n\nconst dog = Object.create(animal);\ndog.breed = 'Golden Retriever';\ndog.makeSound = function() {\n  return 'Woof!';\n};\n```\n\n**ES6 Classes (Syntactic Sugar)**\n```javascript\nclass Animal {\n  constructor(name) {\n    this.name = name;\n  }\n  \n  makeSound() {\n    return 'Some sound';\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    super(name);\n    this.breed = breed;\n  }\n  \n  makeSound() {\n    return 'Woof!';\n  }\n}\n\nconst myDog = new Dog('Buddy', 'Golden Retriever');\n```\n\n**Checking Prototypes**\n```javascript\nconsole.log(myDog instanceof Dog); // true\nconsole.log(myDog instanceof Animal); // true\nconsole.log(Dog.prototype.isPrototypeOf(myDog)); // true\n```",
        "videoUrl": "",
        "completed": false,
        "resources": []
      },
      {
        "Id": 203,
        "courseId": 2,
        "title": "Async/Await and Promises",
        "content": "Modern JavaScript handles asynchronous operations with Promises and async/await. Let's master these concepts.\n\n**Understanding Promises**\nA Promise represents the eventual completion or failure of an asynchronous operation.\n\n**Promise States**\n• **Pending**: Initial state, neither fulfilled nor rejected\n• **Fulfilled**: Operation completed successfully\n• **Rejected**: Operation failed\n\n**Creating Promises**\n```javascript\nconst myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    const success = Math.random() > 0.5;\n    if (success) {\n      resolve('Operation successful!');\n    } else {\n      reject('Operation failed!');\n    }\n  }, 1000);\n});\n```\n\n**Using Promises**\n```javascript\nmyPromise\n  .then(result => {\n    console.log(result);\n    return 'Next step';\n  })\n  .then(nextResult => {\n    console.log(nextResult);\n  })\n  .catch(error => {\n    console.error(error);\n  })\n  .finally(() => {\n    console.log('Cleanup');\n  });\n```\n\n**Async/Await Syntax**\n```javascript\nasync function fetchUserData(userId) {\n  try {\n    const user = await fetch(`/api/users/${userId}`);\n    const userData = await user.json();\n    const posts = await fetch(`/api/users/${userId}/posts`);\n    const postsData = await posts.json();\n    \n    return {\n      user: userData,\n      posts: postsData\n    };\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    throw error;\n  }\n}\n```\n\n**Promise Utilities**\n```javascript\n// Wait for all promises to resolve\nconst results = await Promise.all([promise1, promise2, promise3]);\n\n// Wait for first promise to resolve\nconst winner = await Promise.race([promise1, promise2, promise3]);\n\n// Wait for all promises to settle (resolve or reject)\nconst outcomes = await Promise.allSettled([promise1, promise2, promise3]);\n```\n\n**Error Handling**\n```javascript\nasync function safeApiCall() {\n  try {\n    const response = await fetch('/api/data');\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    if (error instanceof TypeError) {\n      console.error('Network error:', error.message);\n    } else {\n      console.error('API error:', error.message);\n    }\n    return null;\n  }\n}\n```",
        "videoUrl": "",
        "completed": false,
        "resources": []
      },
      {
        "Id": 204,
        "courseId": 2,
        "title": "ES6+ Modern Features",
        "content": "Explore the most useful modern JavaScript features that make your code more concise and powerful.\n\n**Destructuring Assignment**\n```javascript\n// Array destructuring\nconst [first, second, ...rest] = [1, 2, 3, 4, 5];\nconst [a, , c] = [1, 2, 3]; // Skip elements\n\n// Object destructuring\nconst { name, age, city = 'Unknown' } = person;\nconst { name: fullName } = person; // Rename variable\n\n// Function parameters\nfunction greet({ name, age }) {\n  return `Hello ${name}, you are ${age} years old`;\n}\n```\n\n**Spread and Rest Operators**\n```javascript\n// Spread arrays\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Spread objects\nconst obj1 = { a: 1, b: 2 };\nconst obj2 = { c: 3, d: 4 };\nconst merged = { ...obj1, ...obj2 };\n\n// Rest parameters\nfunction sum(first, ...numbers) {\n  return numbers.reduce((total, num) => total + num, first);\n}\n```\n\n**Template Literals**\n```javascript\nconst name = 'Alice';\nconst age = 30;\n\n// Multi-line strings\nconst message = `\n  Hello ${name}!\n  You are ${age} years old.\n  ${age >= 18 ? 'You are an adult.' : 'You are a minor.'}\n`;\n\n// Tagged templates\nfunction highlight(strings, ...values) {\n  return strings.reduce((result, string, i) => {\n    const value = values[i] ? `<mark>${values[i]}</mark>` : '';\n    return result + string + value;\n  }, '');\n}\n\nconst highlighted = highlight`Hello ${name}, you are ${age} years old!`;\n```\n\n**Arrow Functions**\n```javascript\n// Basic arrow function\nconst add = (a, b) => a + b;\n\n// Single parameter (parentheses optional)\nconst square = x => x * x;\n\n// No parameters\nconst greet = () => 'Hello!';\n\n// Block body\nconst processData = (data) => {\n  const processed = data.filter(item => item.active);\n  return processed.map(item => item.value);\n};\n\n// Lexical 'this' binding\nclass Timer {\n  constructor() {\n    this.seconds = 0;\n  }\n  \n  start() {\n    // Arrow function preserves 'this' context\n    setInterval(() => {\n      this.seconds++;\n      console.log(this.seconds);\n    }, 1000);\n  }\n}\n```\n\n**Enhanced Object Literals**\n```javascript\nconst name = 'John';\nconst age = 30;\n\n// Shorthand property names\nconst person = { name, age };\n\n// Shorthand method names\nconst calculator = {\n  add(a, b) {\n    return a + b;\n  },\n  \n  // Computed property names\n  [dynamicKey]: 'dynamic value'\n};\n```\n\n**Default Parameters**\n```javascript\nfunction createUser(name, age = 18, role = 'user') {\n  return { name, age, role };\n}\n\n// Destructuring with defaults\nfunction displayUser({ name, age = 18, email = 'No email' } = {}) {\n  console.log(`${name} (${age}): ${email}`);\n}\n```",
        "videoUrl": "",
        "completed": false,
        "resources": []
      },
      {
        "Id": 205,
        "courseId": 2,
        "title": "Modules and Import/Export",
        "content": "Learn how to organize your JavaScript code using modules and understand different import/export patterns.\n\n**Why Modules?**\n• Code organization and reusability\n• Namespace management\n• Dependency management\n• Better maintainability\n\n**Export Syntax**\n```javascript\n// Named exports\nexport const PI = 3.14159;\nexport function calculateArea(radius) {\n  return PI * radius * radius;\n}\n\nexport class Circle {\n  constructor(radius) {\n    this.radius = radius;\n  }\n  \n  getArea() {\n    return calculateArea(this.radius);\n  }\n}\n\n// Export list\nconst sqrt = Math.sqrt;\nconst pow = Math.pow;\nexport { sqrt, pow };\n\n// Rename exports\nexport { sqrt as squareRoot, pow as power };\n```\n\n**Default Exports**\n```javascript\n// utils.js\nclass Calculator {\n  add(a, b) { return a + b; }\n  subtract(a, b) { return a - b; }\n}\n\nexport default Calculator;\n\n// Or inline\nexport default class {\n  // class definition\n}\n\n// Function as default\nexport default function(x, y) {\n  return x + y;\n}\n```\n\n**Import Syntax**\n```javascript\n// Named imports\nimport { PI, calculateArea, Circle } from './math.js';\n\n// Rename imports\nimport { calculateArea as getCircleArea } from './math.js';\n\n// Import all as namespace\nimport * as MathUtils from './math.js';\nconsole.log(MathUtils.PI);\n\n// Default import\nimport Calculator from './calculator.js';\n\n// Mixed imports\nimport Calculator, { PI, calculateArea } from './math.js';\n\n// Side-effect imports\nimport './styles.css';\nimport './polyfills.js';\n```\n\n**Dynamic Imports**\n```javascript\n// Lazy loading\nasync function loadModule() {\n  try {\n    const module = await import('./heavy-module.js');\n    module.doSomething();\n  } catch (error) {\n    console.error('Failed to load module:', error);\n  }\n}\n\n// Conditional loading\nif (condition) {\n  import('./optional-feature.js')\n    .then(module => {\n      module.initialize();\n    });\n}\n\n// Dynamic module selection\nconst moduleName = getUserPreference();\nconst module = await import(`./themes/${moduleName}.js`);\n```\n\n**Module Patterns**\n```javascript\n// Barrel exports (index.js)\nexport { default as Button } from './Button.js';\nexport { default as Input } from './Input.js';\nexport { default as Modal } from './Modal.js';\n\n// Usage\nimport { Button, Input, Modal } from './components';\n\n// Re-export with modifications\nexport { Circle as Shape } from './math.js';\nexport { default } from './calculator.js';\n```\n\n**Best Practices**\n• Use named exports for utilities and multiple exports\n• Use default exports for main component/class of a module\n• Keep module dependencies clear and avoid circular dependencies\n• Use dynamic imports for code splitting\n• Group related functionality in modules\n• Use barrel exports for better API design",
        "videoUrl": "",
        "completed": false,
        "resources": []
      },
      {
        "Id": 206,
        "courseId": 2,
        "title": "Advanced Array Methods",
        "content": "Master the powerful array methods that make JavaScript functional programming elegant and efficient.\n\n**Transform Methods**\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\n\n// map - transform each element\nconst doubled = numbers.map(n => n * 2);\nconst strings = numbers.map(n => `Number: ${n}`);\n\n// flatMap - map and flatten\nconst words = ['hello', 'world'];\nconst letters = words.flatMap(word => word.split(''));\n// ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']\n```\n\n**Filter and Search Methods**\n```javascript\nconst users = [\n  { name: 'Alice', age: 25, active: true },\n  { name: 'Bob', age: 17, active: false },\n  { name: 'Charlie', age: 30, active: true }\n];\n\n// filter - select elements that match condition\nconst adults = users.filter(user => user.age >= 18);\nconst activeUsers = users.filter(user => user.active);\n\n// find - get first matching element\nconst alice = users.find(user => user.name === 'Alice');\n\n// findIndex - get index of first matching element\nconst aliceIndex = users.findIndex(user => user.name === 'Alice');\n\n// some - check if any element matches\nconst hasMinors = users.some(user => user.age < 18);\n\n// every - check if all elements match\nconst allActive = users.every(user => user.active);\n\n// includes - check if array contains value\nconst hasAlice = users.some(user => user.name === 'Alice');\n```\n\n**Reduce Methods**\n```javascript\n// reduce - accumulate values\nconst sum = numbers.reduce((total, num) => total + num, 0);\nconst max = numbers.reduce((max, num) => num > max ? num : max);\n\n// Complex reduce examples\nconst usersByAge = users.reduce((groups, user) => {\n  const ageGroup = user.age < 18 ? 'minor' : 'adult';\n  groups[ageGroup] = groups[ageGroup] || [];\n  groups[ageGroup].push(user);\n  return groups;\n}, {});\n\nconst userStats = users.reduce((stats, user) => {\n  stats.total++;\n  if (user.active) stats.active++;\n  stats.averageAge += user.age;\n  return stats;\n}, { total: 0, active: 0, averageAge: 0 });\n\nuserStats.averageAge /= userStats.total;\n```\n\n**Sort and Reverse**\n```javascript\n// Basic sorting\nconst sorted = numbers.slice().sort(); // Create copy first\nconst reversed = numbers.slice().reverse();\n\n// Custom sorting\nconst usersByAge = users.slice().sort((a, b) => a.age - b.age);\nconst usersByName = users.slice().sort((a, b) => a.name.localeCompare(b.name));\n\n// Multiple criteria sorting\nconst sortedUsers = users.slice().sort((a, b) => {\n  // First by active status\n  if (a.active !== b.active) {\n    return b.active - a.active;\n  }\n  // Then by age\n  return a.age - b.age;\n});\n```\n\n**Advanced Techniques**\n```javascript\n// Chaining methods\nconst result = users\n  .filter(user => user.active)\n  .map(user => ({ ...user, slug: user.name.toLowerCase() }))\n  .sort((a, b) => a.age - b.age)\n  .slice(0, 10);\n\n// Functional composition\nconst pipe = (...fns) => (value) => fns.reduce((acc, fn) => fn(acc), value);\n\nconst processUsers = pipe(\n  users => users.filter(user => user.active),\n  users => users.map(user => ({ ...user, isAdult: user.age >= 18 })),\n  users => users.sort((a, b) => b.age - a.age)\n);\n\nconst processedUsers = processUsers(users);\n\n// Performance considerations\n// Use for...of for simple iterations (faster)\nfor (const user of users) {\n  console.log(user.name);\n}\n\n// Use array methods for transformations (more readable)\nconst activeUserNames = users\n  .filter(user => user.active)\n  .map(user => user.name);\n```\n\n**Working with Nested Arrays**\n```javascript\nconst nested = [[1, 2], [3, 4], [5, 6]];\n\n// flatten - ES2019\nconst flat = nested.flat();\nconst deepNested = [1, [2, [3, [4]]]];\nconst deepFlat = deepNested.flat(Infinity);\n\n// Manual flattening with reduce\nconst manualFlat = nested.reduce((acc, arr) => acc.concat(arr), []);\n\n// Group and flatten pattern\nconst posts = [\n  { id: 1, tags: ['js', 'react'] },\n  { id: 2, tags: ['css', 'html'] },\n  { id: 3, tags: ['js', 'node'] }\n];\n\nconst allTags = posts\n  .flatMap(post => post.tags)\n  .filter((tag, index, array) => array.indexOf(tag) === index);\n// ['js', 'react', 'css', 'html', 'node']\n```",
        "videoUrl": "",
        "completed": false,
        "resources": []
      }
    ]
  },
  {
    "Id": 3,
    "title": "CSS Grid and Flexbox Mastery",
    "description": "Master modern CSS layout techniques with CSS Grid and Flexbox. Learn to create responsive layouts with ease.",
    "totalLessons": 5,
    "duration": "2-3 hours",
    "lessons": [
      {
        "Id": 301,
        "courseId": 3,
        "title": "Flexbox Fundamentals",
        "content": "Flexbox is a one-dimensional layout method for arranging elements in rows or columns.\n\n**Flex Container vs Flex Items**\n• Container: Parent element with `display: flex`\n• Items: Direct children of the flex container\n\n**Basic Setup**\n```css\n.container {\n  display: flex;\n  /* or display: inline-flex; */\n}\n```\n\n**Main Axis vs Cross Axis**\n• Main axis: Primary axis (horizontal by default)\n• Cross axis: Perpendicular to main axis (vertical by default)\n\n**Container Properties**\n```css\n.container {\n  /* Direction */\n  flex-direction: row | row-reverse | column | column-reverse;\n  \n  /* Wrapping */\n  flex-wrap: nowrap | wrap | wrap-reverse;\n  \n  /* Shorthand */\n  flex-flow: flex-direction flex-wrap;\n  \n  /* Main axis alignment */\n  justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;\n  \n  /* Cross axis alignment */\n  align-items: stretch | flex-start | flex-end | center | baseline;\n  \n  /* Multi-line cross axis alignment */\n  align-content: stretch | flex-start | flex-end | center | space-between | space-around;\n  \n  /* Gap between items */\n  gap: 10px; /* or row-gap and column-gap */\n}\n```\n\n**Item Properties**\n```css\n.item {\n  /* Growth factor */\n  flex-grow: 0; /* default */\n  \n  /* Shrink factor */\n  flex-shrink: 1; /* default */\n  \n  /* Base size */\n  flex-basis: auto; /* default */\n  \n  /* Shorthand */\n  flex: flex-grow flex-shrink flex-basis;\n  /* Common values: */\n  flex: 1; /* grow and shrink equally */\n  flex: none; /* don't grow or shrink */\n  \n  /* Individual alignment */\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n  \n  /* Order */\n  order: 0; /* default */\n}\n```\n\n**Common Patterns**\n```css\n/* Centering */\n.center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Space between navigation items */\n.nav {\n  display: flex;\n  justify-content: space-between;\n}\n\n/* Equal width columns */\n.columns {\n  display: flex;\n}\n\n.column {\n  flex: 1;\n}\n\n/* Responsive layout */\n.cards {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n}\n\n.card {\n  flex: 1 1 300px; /* grow, shrink, min-width */\n}\n```",
        "videoUrl": "",
        "completed": false,
        "resources": []
      },
      {
        "Id": 302,
        "courseId": 3,
        "title": "CSS Grid Fundamentals",
        "content": "CSS Grid is a two-dimensional layout system that provides precise control over rows and columns.\n\n**Basic Grid Setup**\n```css\n.container {\n  display: grid;\n  /* or display: inline-grid; */\n}\n```\n\n**Defining Grid Structure**\n```css\n.grid {\n  /* Define columns */\n  grid-template-columns: 200px 1fr 200px;\n  /* or */\n  grid-template-columns: repeat(3, 1fr);\n  /* or */\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  \n  /* Define rows */\n  grid-template-rows: 100px auto 50px;\n  \n  /* Gaps */\n  gap: 20px;\n  /* or */\n  row-gap: 20px;\n  column-gap: 10px;\n}\n```\n\n**Grid Lines and Areas**\n```css\n.grid {\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar main main\"\n    \"footer footer footer\";\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.footer { grid-area: footer; }\n```\n\n**Item Positioning**\n```css\n.item {\n  /* Line-based positioning */\n  grid-column-start: 1;\n  grid-column-end: 3;\n  grid-row-start: 2;\n  grid-row-end: 4;\n  \n  /* Shorthand */\n  grid-column: 1 / 3;\n  grid-row: 2 / 4;\n  \n  /* Span notation */\n  grid-column: span 2;\n  grid-row: span 3;\n  \n  /* Area assignment */\n  grid-area: header;\n  \n  /* Or all at once: row-start / column-start / row-end / column-end */\n  grid-area: 1 / 1 / 2 / 4;\n}\n```\n\n**Alignment**\n```css\n.grid {\n  /* Align grid within container */\n  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;\n  align-content: start | end | center | stretch | space-around | space-between | space-evenly;\n  \n  /* Align items within grid cells */\n  justify-items: start | end | center | stretch;\n  align-items: start | end | center | stretch;\n}\n\n.item {\n  /* Individual item alignment */\n  justify-self: start | end | center | stretch;\n  align-self: start | end | center | stretch;\n}\n```\n\n**Responsive Grid Patterns**\n```css\n/* Auto-fit columns */\n.auto-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n}\n\n/* Dense packing */\n.masonry {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-auto-flow: dense;\n  gap: 1rem;\n}\n\n/* Responsive with media queries */\n.responsive-grid {\n  display: grid;\n  gap: 1rem;\n  grid-template-columns: 1fr;\n}\n\n@media (min-width: 768px) {\n  .responsive-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n@media (min-width: 1024px) {\n  .responsive-grid {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n```\n\n**Advanced Features**\n```css\n/* Implicit grid */\n.grid {\n  grid-auto-rows: 100px;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: row | column | dense;\n}\n\n/* Subgrid (limited support) */\n.subgrid {\n  display: grid;\n  grid-template-columns: subgrid;\n  grid-template-rows: subgrid;\n}\n```",
        "videoUrl": "",
        "completed": false,
        "resources": []
      },
      {
        "Id": 303,
        "courseId": 3,
        "title": "When to Use Grid vs Flexbox",
        "content": "Understanding when to use CSS Grid versus Flexbox is crucial for efficient layout design.\n\n**Flexbox: One-Dimensional Layouts**\nUse Flexbox when you need to:\n• Arrange items in a single row or column\n• Distribute space between items\n• Align items along one axis\n• Create responsive navigation bars\n• Center content\n• Create equal-height columns\n\n**Flexbox Examples**\n```css\n/* Navigation bar */\n.navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n/* Card layout with equal heights */\n.card-container {\n  display: flex;\n  gap: 1rem;\n}\n\n.card {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.card-content {\n  flex: 1;\n}\n\n/* Centering */\n.center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n}\n```\n\n**CSS Grid: Two-Dimensional Layouts**\nUse CSS Grid when you need to:\n• Create complex layouts with rows and columns\n• Overlap elements\n• Align items in two dimensions\n• Create magazine-style layouts\n• Build page-level layouts\n• Position items precisely\n\n**CSS Grid Examples**\n```css\n/* Page layout */\n.page {\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"nav main aside\"\n    \"footer footer footer\";\n  grid-template-rows: auto 1fr auto;\n  grid-template-columns: 200px 1fr 200px;\n  min-height: 100vh;\n}\n\n/* Card grid */\n.card-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 2rem;\n}\n\n/* Magazine layout */\n.magazine {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  gap: 1rem;\n}\n\n.hero {\n  grid-column: 1 / -1;\n}\n\n.article {\n  grid-column: span 8;\n}\n\n.sidebar {\n  grid-column: span 4;\n}\n```\n\n**Combining Grid and Flexbox**\nOften, the best approach is using both:\n\n```css\n/* Grid for overall layout */\n.layout {\n  display: grid;\n  grid-template-areas:\n    \"header\"\n    \"main\"\n    \"footer\";\n  grid-template-rows: auto 1fr auto;\n  min-height: 100vh;\n}\n\n/* Flexbox for header content */\n.header {\n  grid-area: header;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n}\n\n/* Flexbox for navigation */\n.nav {\n  display: flex;\n  gap: 1rem;\n}\n\n/* Grid for main content */\n.main {\n  grid-area: main;\n  display: grid;\n  grid-template-columns: 1fr 300px;\n  gap: 2rem;\n  padding: 1rem;\n}\n\n/* Flexbox for cards */\n.card {\n  display: flex;\n  flex-direction: column;\n}\n\n.card-footer {\n  margin-top: auto;\n}\n```\n\n**Decision Tree**\n```\nDo you need to control layout in 2 dimensions?\n├── Yes → Use CSS Grid\n└── No\n    ├── Do you need to distribute items along one axis?\n    │   ├── Yes → Use Flexbox\n    │   └── No → Consider block/inline layout\n    └── Do you need to align items?\n        ├── Yes → Use Flexbox\n        └── No → Consider other methods\n```\n\n**Performance Considerations**\n• Both Grid and Flexbox are hardware-accelerated\n• Grid is slightly more complex to render\n• Flexbox may cause more reflows with flex-grow/shrink\n• Use the simplest solution that meets your needs\n\n**Browser Support**\n• Flexbox: Excellent (IE10+)\n• CSS Grid: Good (IE11 with -ms- prefix, modern syntax in all current browsers)\n• Use feature queries for progressive enhancement:\n\n```css\n.layout {\n  /* Fallback */\n  display: block;\n}\n\n@supports (display: grid) {\n  .layout {\n    display: grid;\n    grid-template-columns: 1fr 300px;\n  }\n}\n```",
        "videoUrl": "",
        "completed": false,
        "resources": []
      },
      {
        "Id": 304,
        "courseId": 3,
        "title": "Responsive Layout Patterns",
        "content": "Learn proven responsive layout patterns using CSS Grid and Flexbox that adapt beautifully to any screen size.\n\n**Mobile-First Approach**\nStart with mobile design and progressively enhance:\n\n```css\n/* Mobile base styles */\n.container {\n  padding: 1rem;\n}\n\n.grid {\n  display: grid;\n  gap: 1rem;\n  /* Single column by default */\n  grid-template-columns: 1fr;\n}\n\n/* Tablet */\n@media (min-width: 768px) {\n  .container {\n    padding: 2rem;\n  }\n  \n  .grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n/* Desktop */\n@media (min-width: 1024px) {\n  .container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 3rem;\n  }\n  \n  .grid {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n```\n\n**The Holy Grail Layout**\n```css\n.holy-grail {\n  display: grid;\n  grid-template-areas:\n    \"header\"\n    \"nav\"\n    \"main\"\n    \"aside\"\n    \"footer\";\n  min-height: 100vh;\n}\n\n@media (min-width: 768px) {\n  .holy-grail {\n    grid-template-areas:\n      \"header header header\"\n      \"nav main aside\"\n      \"footer footer footer\";\n    grid-template-rows: auto 1fr auto;\n    grid-template-columns: 200px 1fr 200px;\n  }\n}\n\n.header { grid-area: header; }\n.nav { grid-area: nav; }\n.main { grid-area: main; }\n.aside { grid-area: aside; }\n.footer { grid-area: footer; }\n```\n\n**Auto-Fit Grid Pattern**\n```css\n.auto-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n}\n\n/* Cards will automatically wrap and resize */\n.card {\n  background: white;\n  padding: 1rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n```\n\n**Pancake Stack (Header + Main + Footer)**\n```css\n.pancake-stack {\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  min-height: 100vh;\n}\n\n.header,\n.footer {\n  background: #333;\n  color: white;\n  padding: 1rem;\n}\n\n.main {\n  padding: 1rem;\n}\n```\n\n**Sidebar Pattern**\n```css\n.sidebar-layout {\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 1rem;\n}\n\n@media (min-width: 768px) {\n  .sidebar-layout {\n    grid-template-columns: 250px 1fr;\n  }\n  \n  .sidebar {\n    order: -1;\n  }\n}\n\n/* Flexible sidebar */\n.flexible-sidebar {\n  display: grid;\n  grid-template-columns: fit-content(250px) 1fr;\n  gap: 1rem;\n}\n```\n\n**Aspect Ratio Boxes**\n```css\n.aspect-ratio-box {\n  display: grid;\n  place-items: center;\n  aspect-ratio: 16 / 9;\n  background: #f0f0f0;\n}\n\n/* Fallback for older browsers */\n@supports not (aspect-ratio: 1) {\n  .aspect-ratio-box::before {\n    content: \"\";\n    width: 0;\n    padding-bottom: 56.25%; /* 16:9 ratio */\n    grid-area: 1 / 1 / 2 / 2;\n  }\n  \n  .aspect-ratio-box > * {\n    grid-area: 1 / 1 / 2 / 2;\n  }\n}\n```\n\n**RAM (Repeat, Auto, Minmax) Pattern**\n```css\n.ram {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(min(250px, 100%), 1fr));\n  gap: 1rem;\n}\n```\n\n**Flexbox Media Object**\n```css\n.media {\n  display: flex;\n  gap: 1rem;\n}\n\n.media__image {\n  flex-shrink: 0;\n}\n\n.media__content {\n  flex: 1;\n}\n\n/* Responsive media object */\n@media (max-width: 480px) {\n  .media {\n    flex-direction: column;\n  }\n}\n```\n\n**Container Queries (Future)**\n```css\n@container (min-width: 400px) {\n  .card {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n  }\n}\n```\n\n**Utility Classes**\n```css\n/* Responsive utilities */\n.stack {\n  display: grid;\n  gap: 1rem;\n}\n\n.stack--large {\n  gap: 2rem;\n}\n\n.cluster {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.switcher {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n}\n\n.switcher > * {\n  flex-grow: 1;\n  flex-basis: calc((30rem - 100%) * 999);\n}\n\n/* Responsive text */\n.responsive-text {\n  font-size: clamp(1rem, 2.5vw, 2rem);\n}\n```\n\n**Grid Areas with Breakpoints**\n```css\n.article {\n  display: grid;\n  gap: 1rem;\n  grid-template-areas:\n    \"title\"\n    \"image\"\n    \"content\"\n    \"sidebar\";\n}\n\n@media (min-width: 768px) {\n  .article {\n    grid-template-areas:\n      \"title title\"\n      \"image content\"\n      \"sidebar content\";\n    grid-template-columns: 1fr 2fr;\n  }\n}\n\n@media (min-width: 1024px) {\n  .article {\n    grid-template-areas:\n      \"title title title\"\n      \"image content sidebar\";\n    grid-template-columns: 1fr 2fr 1fr;\n  }\n}\n\n.title { grid-area: title; }\n.image { grid-area: image; }\n.content { grid-area: content; }\n.sidebar { grid-area: sidebar; }\n```",
        "videoUrl": "",
        "completed": false,
        "resources": []
      },
      {
        "Id": 305,
        "courseId": 3,
        "title": "Advanced Layout Techniques",
        "content": "Master advanced CSS layout techniques and modern features for complex designs.\n\n**Subgrid (Limited Browser Support)**\n```css\n.parent {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 1rem;\n}\n\n.child {\n  display: grid;\n  grid-template-columns: subgrid;\n  /* Inherits parent's column tracks */\n}\n```\n\n**CSS Grid Level 2 Features**\n```css\n/* Aspect ratio with grid */\n.grid-aspect {\n  display: grid;\n  aspect-ratio: 1;\n  place-items: center;\n}\n\n/* Gap with different row/column values */\n.custom-gap {\n  display: grid;\n  row-gap: 2rem;\n  column-gap: 1rem;\n  /* or */\n  gap: 2rem 1rem;\n}\n```\n\n**Overlapping Grid Items**\n```css\n.overlay-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 1fr 1fr 1fr;\n}\n\n.background {\n  grid-column: 1 / -1;\n  grid-row: 1 / -1;\n  z-index: 1;\n}\n\n.content {\n  grid-column: 2 / 3;\n  grid-row: 2 / 3;\n  z-index: 2;\n}\n```\n\n**Masonry-like Layouts**\n```css\n/* CSS-only masonry approximation */\n.masonry {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-auto-flow: dense;\n  gap: 1rem;\n}\n\n.masonry-item:nth-child(3n) {\n  grid-row-end: span 2;\n}\n\n.masonry-item:nth-child(5n) {\n  grid-row-end: span 3;\n}\n\n/* True masonry with JavaScript */\n.js-masonry {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-auto-rows: 10px;\n  gap: 1rem;\n}\n```\n\n**Intrinsic Sizing**\n```css\n.intrinsic {\n  display: grid;\n  grid-template-columns: \n    min-content     /* Size to content width */\n    max-content     /* Size to content without wrapping */\n    fit-content(300px)  /* Content width, max 300px */\n    1fr;\n}\n\n/* Fit content example */\n.fit-content-demo {\n  display: grid;\n  grid-template-columns: fit-content(200px) 1fr;\n  gap: 1rem;\n}\n```\n\n**Custom Grid Functions**\n```css\n/* Repeat with different patterns */\n.complex-repeat {\n  grid-template-columns: \n    repeat(4, [line-start] 1fr [line-end]);\n}\n\n/* Mixed units */\n.mixed-units {\n  grid-template-columns:\n    minmax(200px, 1fr)\n    minmax(100px, 300px)\n    2fr;\n}\n```\n\n**Grid Animation**\n```css\n.animated-grid {\n  display: grid;\n  grid-template-columns: 1fr 0fr 1fr;\n  transition: grid-template-columns 0.3s ease;\n}\n\n.animated-grid:hover {\n  grid-template-columns: 1fr 1fr 1fr;\n}\n\n/* Animating grid items */\n.grid-item {\n  transition: \n    grid-column 0.3s ease,\n    grid-row 0.3s ease;\n}\n\n.grid-item:hover {\n  grid-column: span 2;\n}\n```\n\n**Advanced Flexbox Techniques**\n```css\n/* Flex basis calculations */\n.flex-calc {\n  display: flex;\n  gap: 1rem;\n}\n\n.flex-item {\n  flex: 1 1 calc(33.333% - 0.667rem);\n}\n\n/* Flexible spacing */\n.flex-space {\n  display: flex;\n  gap: clamp(0.5rem, 2vw, 2rem);\n}\n\n/* Auto margins for alignment */\n.flex-auto-margin {\n  display: flex;\n}\n\n.push-right {\n  margin-left: auto;\n}\n\n.center-item {\n  margin: 0 auto;\n}\n```\n\n**Container-Based Sizing**\n```css\n/* Using CSS custom properties for responsive design */\n.container {\n  --columns: 1;\n  --gap: 1rem;\n  \n  display: grid;\n  grid-template-columns: repeat(var(--columns), 1fr);\n  gap: var(--gap);\n}\n\n@media (min-width: 768px) {\n  .container {\n    --columns: 2;\n    --gap: 2rem;\n  }\n}\n\n@media (min-width: 1024px) {\n  .container {\n    --columns: 3;\n  }\n}\n```\n\n**Feature Queries**\n```css\n/* Progressive enhancement */\n.layout {\n  /* Fallback: flexbox */\n  display: flex;\n  flex-wrap: wrap;\n}\n\n@supports (display: grid) {\n  .layout {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  }\n}\n\n@supports (display: grid) and (gap: 1rem) {\n  .layout {\n    gap: 1rem;\n  }\n}\n```\n\n**Performance Optimization**\n```css\n/* Use transforms for animations instead of changing grid properties */\n.optimized-animation {\n  transform: translateX(0);\n  transition: transform 0.3s ease;\n}\n\n.optimized-animation:hover {\n  transform: translateX(100px);\n}\n\n/* Contain layout calculations */\n.contained {\n  contain: layout style;\n}\n\n/* Use will-change sparingly */\n.will-animate {\n  will-change: transform;\n}\n\n.will-animate:hover {\n  will-change: auto;\n}\n```",
        "videoUrl": "",
        "completed": false,
        "resources": []
      }
    ]
  }
]